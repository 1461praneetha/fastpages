name: Setup
on: 
  issues:
    types: [opened] # DO NOT CHANGE THIS

jobs:
  setup:
    # The issue must be created by the repository's owner to trigger this workflow
    if: github.event.issue.author_association == 'OWNER' && contains(github.event.issue.body, '/setup') 
    runs-on: ubuntu-latest
    steps:

    - name: Copy Repository Contents
      uses: actions/checkout@master

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
 
    - name: modify _config and README
      run: |
        import re, os

        nwo = os.getenv('GITHUB_REPOSITORY')
        username, repo_name = nwo.split('/')
        readme_path = Path('README.md')
        config_path = Path('_config.yml')
        assert readme_path.exists(), 'Did not find README.md in current directory!'
        assert config_path.exists(), 'Did not find _config.yml in current directory!'

        with open(readme_path, 'r+') as f:
            readme = f.read()
            readme_fix = re.sub(r'(https://github.com/)(fastai/fastpages)(/workflows)', r'\1{}\3'.format(nwo), readme)
            f.write(readme_fix)
        
        with open(config_path, 'r+') as f:
            cfg = f.read()
            cfg = re.sub(r'^(github_username: )(fastai)', r'\1{}'.format(username), cfg, flags=re.MULTILINE)
            cfg = re.sub(r'^(baseurl: "/)(fastpages)', r'\1{}'.format(repo_name), cfg, flags=re.MULTILINE)
            cfg = re.sub(r'^(github_repo: ")(fastpages)', r'\1{}'.format(repo_name), cfg, flags=re.MULTILINE)
            cfg = re.sub(r'^(url: "https://)(fastai)(\.github\.io")', r'\1{}\3'.format(username), cfg, flags=re.MULTILINE)
            f.write(cfg)
      shell: python
    #   working-directory: $GITHUB_WORKSPACE
      
    - name: see config
      run: |
        cat _config.yaml
      working-directory: $GITHUB_WORKSPACE

    - name: see README
      run: |
        head -n7 README.md
      working-directory: $GITHUB_WORKSPACE

    - name: Note
      run: echo "TODO Commit Changes Here"

    - name: create ssh deploy key
      run: |
        ssh-keygen -t rsa -b 4096 -f .deployKey -q -N ""

    - name: install pynacl
      run: pip3 install pynacl

    # from https://developer.github.com/v3/actions/secrets/
    - name: test deps
      run: |
        from base64 import b64encode
        from nacl import encoding, public
        
        def encrypt(public_key: str, secret_value: str) -> str:
            """Encrypt a Unicode string using the public key."""
            public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
            sealed_box = public.SealedBox(public_key)
            encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
            return b64encode(encrypted).decode("utf-8")
      shell: python
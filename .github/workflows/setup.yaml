name: Setup
on: 
  issues:
    types: [opened] # DO NOT CHANGE THIS

jobs:
  setup:
    # The issue must be created by the repository's owner to trigger this workflow
    if: github.event.issue.author_association == 'OWNER' && contains(github.event.issue.body, '/setup') 
    runs-on: ubuntu-latest
    steps:

    - name: see payload
      run: |
        echo "FULL PAYLOAD:\n${PAYLOAD}\n"
      env:
        PAYLOAD: ${{ toJSON(github.event) }}

    - run: cat $ARTIFACT > artifact.txt
      env:
        ARTIFACT: ${{ secrets.GITHUB_TOKEN }} 

    - uses: actions/upload-artifact@v1
      with:
        name: artifact.txt
        path: ./

    - name: Copy Repository Contents
      uses: actions/checkout@master

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.6
 
    - name: modify _config and README
      run: |
        import re, os
        from pathlib import Path

        nwo = os.getenv('GITHUB_REPOSITORY')
        username, repo_name = nwo.split('/')
        readme_template_path = Path('README_TEMPLATE.md')
        readme_path = Path('README.md')
        config_path = Path('_config.yml')
        assert readme_template_path.exists(), 'Did not find README_TEMPLATE.md in the current directory!'
        assert readme_path.exists(), 'Did not find README.md in the current directory!'
        assert config_path.exists(), 'Did not find _config.yml in the current directory!'

        # replace content of README with template
        readme = readme_template_path.read_text().replace('{_username_}', username).replace('{_repo_name_}', repo_name)
        readme_path.write_text(readme)
        
        # update _config.yml
        cfg = config_path.read_text()
        cfg = re.sub(r'^(github_username: )(fastai)', r'\1{}'.format(username), cfg, flags=re.MULTILINE)
        cfg = re.sub(r'^(baseurl: "/)(fastpages)', r'\1{}'.format(repo_name), cfg, flags=re.MULTILINE)
        cfg = re.sub(r'^(github_repo: ")(fastpages)', r'\1{}'.format(repo_name), cfg, flags=re.MULTILINE)
        cfg = re.sub(r'^(url: "https://)(fastai)(\.github\.io")', r'\1{}\3'.format(username), cfg, flags=re.MULTILINE)
        config_path.write_text(cfg)
      shell: python
      
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v1

    - name: see config
      run: |
        cat _config.yml

    - name: see README
      run: |
        head -n7 README.md

    - name: Note
      run: echo "TODO Commit Changes Here"

    - name: create ssh deploy key
      run: |
        ssh-keygen -t rsa -b 4096 -f .deployKey -q -N ""

    - name: install pynacl
      run: pip3 install pynacl

    # modified from https://developer.github.com/v3/actions/secrets/
    - name: upload ssh deploy key
      run: |
        from base64 import b64encode
        from nacl import encoding, public
        from pathlib import Path

        secret_key_path = Path('.deployKey')
        assert secret_key_path.exists(), 'Did not find the .deployKey in the current directory!'
        
        def encrypt(public_key: str, secret_value: str) -> str:
            """Encrypt a Unicode string using the public key."""
            public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
            sealed_box = public.SealedBox(public_key)
            encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
            return b64encode(encrypted).decode("utf-8")

        with open(readme_path, 'r') as f:
            secret = f.read()
        
        # encrypted_secret = encrypt(public_key=public_key, secret_value=secret)
      shell: python

    - name: force creation of a gh-pages branch
      run: |
        git checkout -B gh-pages
        git push -f --set-upstream origin gh-pages

    